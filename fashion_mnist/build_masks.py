#!/usr/bin/env python
# -*- coding: utf-8 -*-

from sklearn.model_selection import StratifiedKFold
import argparse
import numpy as np
import os
import sys
import tensorflow as tf

# parse args
parser = argparse.ArgumentParser(
    description='This constructs masks to create folds in the mnist and fashion MNIST datasets.')
parser.add_argument(
    'outfile',
    type=str,
    help='npy file to dump masks to; will terminate if file already exists')
parser.add_argument(
    'dataset',
    type=str,
    choices=['mnist', 'fashion_mnist'],
    help='dataset to use in experiments')
parser.add_argument(
    'folds',
    type=int,
    help='number of folds to build masks for')
args = vars(parser.parse_args())

# check args
if os.path.isfile(args['outfile']):
    warnings.warn('outfile already exists; terminating\n')
    sys.exit(0)

SEED = 15626  # generated by RANDOM.ORG

# load dataset
if args['dataset'] == 'mnist':
    (raw_x_train, raw_y_train), (raw_x_test, raw_y_test) = \
        tf.keras.datasets.mnist.load_data()
else:
    assert args['dataset'] == 'fashion_mnist'
    (raw_x_train, raw_y_train), (raw_x_test, raw_y_test) = \
        tf.keras.datasets.fashion_mnist.load_data()
raw_x_train, raw_x_test = raw_x_train / 255.0, raw_x_test / 255.0

# build mask for folds
skf = StratifiedKFold(n_splits=args['folds'], shuffle=True, random_state=SEED)
folds = [i for _, i in skf.split(raw_x_train, raw_y_train)]

# build mask for each digit in folds
masks = [list() for _ in range(len(folds) + 1)]
assert(min(raw_y_train) == 0)
for j in range(max(raw_y_train) + 1):
    for i in range(len(folds)):
        assert(len(raw_y_train.shape) == 1)
        mask = np.zeros(len(raw_y_train), dtype=bool)
        mask[folds[i]] += raw_y_train[folds[i]] == j
        masks[i].append(mask)
    masks[-1].append(raw_y_test == j)
masks = np.array(masks)

# print report
print('fold,number,count')
lines = list()
for j in range(max(raw_y_train) + 1):
    for i in range(len(folds)):
        lines.append('{},{},{}'.format(i, j, sum(masks[i, j])))
    lines.append('holdout,{},{}'.format(j, sum(masks[-1, j])))
for line in sorted(lines):
    print(line)

# save masks
np.save(args['outfile'], masks)
